{"ast":null,"code":"import natural from 'natural';\nconst tokenizer = new natural.WordTokenizer();\nconst stopwords = new Set(['a', 'an', 'and', 'are', 'as', 'at', 'be', 'by', 'for', 'from', 'has', 'he', 'in', 'is', 'it', 'its', 'of', 'on', 'or', 'that', 'the', 'this', 'to', 'was', 'were', 'will', 'with', 'the', 'their', 'they', 'them', 'these', 'those', 'am', 'been', 'being', 'have', 'had', 'having', 'do', 'does', 'did', 'doing', 'would', 'should', 'could', 'shall', 'should', 'may', 'might', 'must']);\nexport const processJobDescription = async text => {\n  // Tokenize the text\n  const tokens = tokenizer.tokenize(text.toLowerCase());\n\n  // Filter out stopwords and non-alphabetic tokens\n  const keywords = tokens.filter(token => token && /^[a-zA-Z]+$/.test(token) && !stopwords.has(token) && token.length > 2);\n\n  // Remove duplicates\n  return [...new Set(keywords)];\n};\nexport const findSynonyms = word => {\n  // This is a simple synonym dictionary - in a real application,\n  // you might want to use a more comprehensive dictionary or thesaurus\n  const synonymDictionary = {\n    'develop': ['create', 'build', 'design', 'implement'],\n    'create': ['develop', 'build', 'design', 'implement'],\n    'build': ['develop', 'create', 'design', 'implement'],\n    'design': ['develop', 'create', 'build', 'implement'],\n    'implement': ['develop', 'create', 'build', 'design'],\n    'manage': ['lead', 'direct', 'oversee', 'supervise'],\n    'lead': ['manage', 'direct', 'oversee', 'supervise'],\n    'direct': ['manage', 'lead', 'oversee', 'supervise'],\n    'oversee': ['manage', 'lead', 'direct', 'supervise'],\n    'supervise': ['manage', 'lead', 'direct', 'oversee'],\n    'analyze': ['examine', 'evaluate', 'assess', 'review'],\n    'examine': ['analyze', 'evaluate', 'assess', 'review'],\n    'evaluate': ['analyze', 'examine', 'assess', 'review'],\n    'assess': ['analyze', 'examine', 'evaluate', 'review'],\n    'review': ['analyze', 'examine', 'evaluate', 'assess']\n  };\n  return synonymDictionary[word.toLowerCase()] || [];\n};","map":{"version":3,"names":["natural","tokenizer","WordTokenizer","stopwords","Set","processJobDescription","text","tokens","tokenize","toLowerCase","keywords","filter","token","test","has","length","findSynonyms","word","synonymDictionary"],"sources":["/var/home/dadmin/hackapp/src/utils/textProcessing.js"],"sourcesContent":["import natural from 'natural';\n\nconst tokenizer = new natural.WordTokenizer();\nconst stopwords = new Set([\n  'a', 'an', 'and', 'are', 'as', 'at', 'be', 'by', 'for', 'from', 'has', 'he',\n  'in', 'is', 'it', 'its', 'of', 'on', 'or', 'that', 'the', 'this', 'to', 'was',\n  'were', 'will', 'with', 'the', 'their', 'they', 'them', 'these', 'those',\n  'am', 'been', 'being', 'have', 'had', 'having', 'do', 'does', 'did', 'doing',\n  'would', 'should', 'could', 'shall', 'should', 'may', 'might', 'must'\n]);\n\nexport const processJobDescription = async (text) => {\n  // Tokenize the text\n  const tokens = tokenizer.tokenize(text.toLowerCase());\n  \n  // Filter out stopwords and non-alphabetic tokens\n  const keywords = tokens.filter(token => \n    token && \n    /^[a-zA-Z]+$/.test(token) && \n    !stopwords.has(token) &&\n    token.length > 2\n  );\n\n  // Remove duplicates\n  return [...new Set(keywords)];\n};\n\nexport const findSynonyms = (word) => {\n  // This is a simple synonym dictionary - in a real application,\n  // you might want to use a more comprehensive dictionary or thesaurus\n  const synonymDictionary = {\n    'develop': ['create', 'build', 'design', 'implement'],\n    'create': ['develop', 'build', 'design', 'implement'],\n    'build': ['develop', 'create', 'design', 'implement'],\n    'design': ['develop', 'create', 'build', 'implement'],\n    'implement': ['develop', 'create', 'build', 'design'],\n    'manage': ['lead', 'direct', 'oversee', 'supervise'],\n    'lead': ['manage', 'direct', 'oversee', 'supervise'],\n    'direct': ['manage', 'lead', 'oversee', 'supervise'],\n    'oversee': ['manage', 'lead', 'direct', 'supervise'],\n    'supervise': ['manage', 'lead', 'direct', 'oversee'],\n    'analyze': ['examine', 'evaluate', 'assess', 'review'],\n    'examine': ['analyze', 'evaluate', 'assess', 'review'],\n    'evaluate': ['analyze', 'examine', 'assess', 'review'],\n    'assess': ['analyze', 'examine', 'evaluate', 'review'],\n    'review': ['analyze', 'examine', 'evaluate', 'assess'],\n  };\n\n  return synonymDictionary[word.toLowerCase()] || [];\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}