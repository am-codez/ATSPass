{"ast":null,"code":"import stringSimilarity from 'string-similarity';\nexport const calculateMatch = (jobKeywords, resumeKeywords) => {\n  if (!jobKeywords.length || !resumeKeywords.length) {\n    return 0;\n  }\n  let matchedKeywords = 0;\n  const usedResumeKeywords = new Set();\n\n  // First pass: exact matches\n  for (const jobKeyword of jobKeywords) {\n    for (const resumeKeyword of resumeKeywords) {\n      if (jobKeyword === resumeKeyword && !usedResumeKeywords.has(resumeKeyword)) {\n        matchedKeywords++;\n        usedResumeKeywords.add(resumeKeyword);\n        break;\n      }\n    }\n  }\n\n  // Second pass: similar matches (if not already matched)\n  for (const jobKeyword of jobKeywords) {\n    if (matchedKeywords === jobKeywords.length) break;\n    for (const resumeKeyword of resumeKeywords) {\n      if (!usedResumeKeywords.has(resumeKeyword)) {\n        const similarity = stringSimilarity.compareTwoStrings(jobKeyword, resumeKeyword);\n        if (similarity > 0.8) {\n          // 80% similarity threshold\n          matchedKeywords++;\n          usedResumeKeywords.add(resumeKeyword);\n          break;\n        }\n      }\n    }\n  }\n  return matchedKeywords / jobKeywords.length * 100;\n};\nexport const findMissingKeywords = (jobKeywords, resumeKeywords) => {\n  const missingKeywords = [];\n  const usedResumeKeywords = new Set();\n\n  // First pass: exact matches\n  for (const jobKeyword of jobKeywords) {\n    let found = false;\n    for (const resumeKeyword of resumeKeywords) {\n      if (jobKeyword === resumeKeyword) {\n        found = true;\n        usedResumeKeywords.add(resumeKeyword);\n        break;\n      }\n    }\n    if (!found) {\n      missingKeywords.push(jobKeyword);\n    }\n  }\n\n  // Second pass: similar matches\n  for (const jobKeyword of jobKeywords) {\n    if (missingKeywords.includes(jobKeyword)) {\n      for (const resumeKeyword of resumeKeywords) {\n        if (!usedResumeKeywords.has(resumeKeyword)) {\n          const similarity = stringSimilarity.compareTwoStrings(jobKeyword, resumeKeyword);\n          if (similarity > 0.8) {\n            missingKeywords.splice(missingKeywords.indexOf(jobKeyword), 1);\n            usedResumeKeywords.add(resumeKeyword);\n            break;\n          }\n        }\n      }\n    }\n  }\n  return missingKeywords;\n};","map":{"version":3,"names":["stringSimilarity","calculateMatch","jobKeywords","resumeKeywords","length","matchedKeywords","usedResumeKeywords","Set","jobKeyword","resumeKeyword","has","add","similarity","compareTwoStrings","findMissingKeywords","missingKeywords","found","push","includes","splice","indexOf"],"sources":["/var/home/dadmin/hackapp/src/utils/matching.js"],"sourcesContent":["import stringSimilarity from 'string-similarity';\n\nexport const calculateMatch = (jobKeywords, resumeKeywords) => {\n  if (!jobKeywords.length || !resumeKeywords.length) {\n    return 0;\n  }\n\n  let matchedKeywords = 0;\n  const usedResumeKeywords = new Set();\n\n  // First pass: exact matches\n  for (const jobKeyword of jobKeywords) {\n    for (const resumeKeyword of resumeKeywords) {\n      if (jobKeyword === resumeKeyword && !usedResumeKeywords.has(resumeKeyword)) {\n        matchedKeywords++;\n        usedResumeKeywords.add(resumeKeyword);\n        break;\n      }\n    }\n  }\n\n  // Second pass: similar matches (if not already matched)\n  for (const jobKeyword of jobKeywords) {\n    if (matchedKeywords === jobKeywords.length) break;\n\n    for (const resumeKeyword of resumeKeywords) {\n      if (!usedResumeKeywords.has(resumeKeyword)) {\n        const similarity = stringSimilarity.compareTwoStrings(jobKeyword, resumeKeyword);\n        if (similarity > 0.8) { // 80% similarity threshold\n          matchedKeywords++;\n          usedResumeKeywords.add(resumeKeyword);\n          break;\n        }\n      }\n    }\n  }\n\n  return (matchedKeywords / jobKeywords.length) * 100;\n};\n\nexport const findMissingKeywords = (jobKeywords, resumeKeywords) => {\n  const missingKeywords = [];\n  const usedResumeKeywords = new Set();\n\n  // First pass: exact matches\n  for (const jobKeyword of jobKeywords) {\n    let found = false;\n    for (const resumeKeyword of resumeKeywords) {\n      if (jobKeyword === resumeKeyword) {\n        found = true;\n        usedResumeKeywords.add(resumeKeyword);\n        break;\n      }\n    }\n    if (!found) {\n      missingKeywords.push(jobKeyword);\n    }\n  }\n\n  // Second pass: similar matches\n  for (const jobKeyword of jobKeywords) {\n    if (missingKeywords.includes(jobKeyword)) {\n      for (const resumeKeyword of resumeKeywords) {\n        if (!usedResumeKeywords.has(resumeKeyword)) {\n          const similarity = stringSimilarity.compareTwoStrings(jobKeyword, resumeKeyword);\n          if (similarity > 0.8) {\n            missingKeywords.splice(missingKeywords.indexOf(jobKeyword), 1);\n            usedResumeKeywords.add(resumeKeyword);\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  return missingKeywords;\n}; "],"mappings":"AAAA,OAAOA,gBAAgB,MAAM,mBAAmB;AAEhD,OAAO,MAAMC,cAAc,GAAGA,CAACC,WAAW,EAAEC,cAAc,KAAK;EAC7D,IAAI,CAACD,WAAW,CAACE,MAAM,IAAI,CAACD,cAAc,CAACC,MAAM,EAAE;IACjD,OAAO,CAAC;EACV;EAEA,IAAIC,eAAe,GAAG,CAAC;EACvB,MAAMC,kBAAkB,GAAG,IAAIC,GAAG,CAAC,CAAC;;EAEpC;EACA,KAAK,MAAMC,UAAU,IAAIN,WAAW,EAAE;IACpC,KAAK,MAAMO,aAAa,IAAIN,cAAc,EAAE;MAC1C,IAAIK,UAAU,KAAKC,aAAa,IAAI,CAACH,kBAAkB,CAACI,GAAG,CAACD,aAAa,CAAC,EAAE;QAC1EJ,eAAe,EAAE;QACjBC,kBAAkB,CAACK,GAAG,CAACF,aAAa,CAAC;QACrC;MACF;IACF;EACF;;EAEA;EACA,KAAK,MAAMD,UAAU,IAAIN,WAAW,EAAE;IACpC,IAAIG,eAAe,KAAKH,WAAW,CAACE,MAAM,EAAE;IAE5C,KAAK,MAAMK,aAAa,IAAIN,cAAc,EAAE;MAC1C,IAAI,CAACG,kBAAkB,CAACI,GAAG,CAACD,aAAa,CAAC,EAAE;QAC1C,MAAMG,UAAU,GAAGZ,gBAAgB,CAACa,iBAAiB,CAACL,UAAU,EAAEC,aAAa,CAAC;QAChF,IAAIG,UAAU,GAAG,GAAG,EAAE;UAAE;UACtBP,eAAe,EAAE;UACjBC,kBAAkB,CAACK,GAAG,CAACF,aAAa,CAAC;UACrC;QACF;MACF;IACF;EACF;EAEA,OAAQJ,eAAe,GAAGH,WAAW,CAACE,MAAM,GAAI,GAAG;AACrD,CAAC;AAED,OAAO,MAAMU,mBAAmB,GAAGA,CAACZ,WAAW,EAAEC,cAAc,KAAK;EAClE,MAAMY,eAAe,GAAG,EAAE;EAC1B,MAAMT,kBAAkB,GAAG,IAAIC,GAAG,CAAC,CAAC;;EAEpC;EACA,KAAK,MAAMC,UAAU,IAAIN,WAAW,EAAE;IACpC,IAAIc,KAAK,GAAG,KAAK;IACjB,KAAK,MAAMP,aAAa,IAAIN,cAAc,EAAE;MAC1C,IAAIK,UAAU,KAAKC,aAAa,EAAE;QAChCO,KAAK,GAAG,IAAI;QACZV,kBAAkB,CAACK,GAAG,CAACF,aAAa,CAAC;QACrC;MACF;IACF;IACA,IAAI,CAACO,KAAK,EAAE;MACVD,eAAe,CAACE,IAAI,CAACT,UAAU,CAAC;IAClC;EACF;;EAEA;EACA,KAAK,MAAMA,UAAU,IAAIN,WAAW,EAAE;IACpC,IAAIa,eAAe,CAACG,QAAQ,CAACV,UAAU,CAAC,EAAE;MACxC,KAAK,MAAMC,aAAa,IAAIN,cAAc,EAAE;QAC1C,IAAI,CAACG,kBAAkB,CAACI,GAAG,CAACD,aAAa,CAAC,EAAE;UAC1C,MAAMG,UAAU,GAAGZ,gBAAgB,CAACa,iBAAiB,CAACL,UAAU,EAAEC,aAAa,CAAC;UAChF,IAAIG,UAAU,GAAG,GAAG,EAAE;YACpBG,eAAe,CAACI,MAAM,CAACJ,eAAe,CAACK,OAAO,CAACZ,UAAU,CAAC,EAAE,CAAC,CAAC;YAC9DF,kBAAkB,CAACK,GAAG,CAACF,aAAa,CAAC;YACrC;UACF;QACF;MACF;IACF;EACF;EAEA,OAAOM,eAAe;AACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}