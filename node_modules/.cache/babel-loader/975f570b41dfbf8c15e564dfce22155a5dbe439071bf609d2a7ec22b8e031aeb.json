{"ast":null,"code":"import { PDFDocument } from 'pdf-lib';\nimport * as pdfjsLib from 'pdfjs-dist';\n\n// Initialize PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\nexport const processResume = async file => {\n  try {\n    const arrayBuffer = await file.arrayBuffer();\n    const pdf = await pdfjsLib.getDocument({\n      data: arrayBuffer\n    }).promise;\n    let text = '';\n\n    // Extract text from each page\n    for (let i = 1; i <= pdf.numPages; i++) {\n      const page = await pdf.getPage(i);\n      const textContent = await page.getTextContent();\n\n      // Extract text from the content\n      const pageText = textContent.items.map(item => item.str).join(' ');\n      text += pageText + '\\n';\n    }\n    if (!text.trim()) {\n      throw new Error('No text content found in the PDF');\n    }\n    return text;\n  } catch (error) {\n    console.error('Error processing PDF:', error);\n    throw new Error('Failed to process PDF file: ' + error.message);\n  }\n};\nexport const createOptimizedPDF = async text => {\n  try {\n    const pdfDoc = await PDFDocument.create();\n    const page = pdfDoc.addPage();\n    const {\n      width,\n      height\n    } = page.getSize();\n\n    // Add text to the PDF\n    page.drawText(text, {\n      x: 50,\n      y: height - 50,\n      size: 12,\n      maxWidth: width - 100\n    });\n\n    // Generate PDF bytes\n    const pdfBytes = await pdfDoc.save();\n    return new Blob([pdfBytes], {\n      type: 'application/pdf'\n    });\n  } catch (error) {\n    console.error('Error creating PDF:', error);\n    throw new Error('Failed to create optimized PDF: ' + error.message);\n  }\n};","map":{"version":3,"names":["PDFDocument","pdfjsLib","GlobalWorkerOptions","workerSrc","version","processResume","file","arrayBuffer","pdf","getDocument","data","promise","text","i","numPages","page","getPage","textContent","getTextContent","pageText","items","map","item","str","join","trim","Error","error","console","message","createOptimizedPDF","pdfDoc","create","addPage","width","height","getSize","drawText","x","y","size","maxWidth","pdfBytes","save","Blob","type"],"sources":["/var/home/dadmin/hackapp/src/utils/resumeProcessing.js"],"sourcesContent":["import { PDFDocument } from 'pdf-lib';\nimport * as pdfjsLib from 'pdfjs-dist';\n\n// Initialize PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\nexport const processResume = async (file) => {\n  try {\n    const arrayBuffer = await file.arrayBuffer();\n    const pdf = await pdfjsLib.getDocument({ data: arrayBuffer }).promise;\n    let text = '';\n\n    // Extract text from each page\n    for (let i = 1; i <= pdf.numPages; i++) {\n      const page = await pdf.getPage(i);\n      const textContent = await page.getTextContent();\n      \n      // Extract text from the content\n      const pageText = textContent.items\n        .map(item => item.str)\n        .join(' ');\n      text += pageText + '\\n';\n    }\n\n    if (!text.trim()) {\n      throw new Error('No text content found in the PDF');\n    }\n\n    return text;\n  } catch (error) {\n    console.error('Error processing PDF:', error);\n    throw new Error('Failed to process PDF file: ' + error.message);\n  }\n};\n\nexport const createOptimizedPDF = async (text) => {\n  try {\n    const pdfDoc = await PDFDocument.create();\n    const page = pdfDoc.addPage();\n    const { width, height } = page.getSize();\n    \n    // Add text to the PDF\n    page.drawText(text, {\n      x: 50,\n      y: height - 50,\n      size: 12,\n      maxWidth: width - 100,\n    });\n\n    // Generate PDF bytes\n    const pdfBytes = await pdfDoc.save();\n    return new Blob([pdfBytes], { type: 'application/pdf' });\n  } catch (error) {\n    console.error('Error creating PDF:', error);\n    throw new Error('Failed to create optimized PDF: ' + error.message);\n  }\n}; "],"mappings":"AAAA,SAASA,WAAW,QAAQ,SAAS;AACrC,OAAO,KAAKC,QAAQ,MAAM,YAAY;;AAEtC;AACAA,QAAQ,CAACC,mBAAmB,CAACC,SAAS,GAAG,2CAA2CF,QAAQ,CAACG,OAAO,oBAAoB;AAExH,OAAO,MAAMC,aAAa,GAAG,MAAOC,IAAI,IAAK;EAC3C,IAAI;IACF,MAAMC,WAAW,GAAG,MAAMD,IAAI,CAACC,WAAW,CAAC,CAAC;IAC5C,MAAMC,GAAG,GAAG,MAAMP,QAAQ,CAACQ,WAAW,CAAC;MAAEC,IAAI,EAAEH;IAAY,CAAC,CAAC,CAACI,OAAO;IACrE,IAAIC,IAAI,GAAG,EAAE;;IAEb;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIL,GAAG,CAACM,QAAQ,EAAED,CAAC,EAAE,EAAE;MACtC,MAAME,IAAI,GAAG,MAAMP,GAAG,CAACQ,OAAO,CAACH,CAAC,CAAC;MACjC,MAAMI,WAAW,GAAG,MAAMF,IAAI,CAACG,cAAc,CAAC,CAAC;;MAE/C;MACA,MAAMC,QAAQ,GAAGF,WAAW,CAACG,KAAK,CAC/BC,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,GAAG,CAAC,CACrBC,IAAI,CAAC,GAAG,CAAC;MACZZ,IAAI,IAAIO,QAAQ,GAAG,IAAI;IACzB;IAEA,IAAI,CAACP,IAAI,CAACa,IAAI,CAAC,CAAC,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,kCAAkC,CAAC;IACrD;IAEA,OAAOd,IAAI;EACb,CAAC,CAAC,OAAOe,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAM,IAAID,KAAK,CAAC,8BAA8B,GAAGC,KAAK,CAACE,OAAO,CAAC;EACjE;AACF,CAAC;AAED,OAAO,MAAMC,kBAAkB,GAAG,MAAOlB,IAAI,IAAK;EAChD,IAAI;IACF,MAAMmB,MAAM,GAAG,MAAM/B,WAAW,CAACgC,MAAM,CAAC,CAAC;IACzC,MAAMjB,IAAI,GAAGgB,MAAM,CAACE,OAAO,CAAC,CAAC;IAC7B,MAAM;MAAEC,KAAK;MAAEC;IAAO,CAAC,GAAGpB,IAAI,CAACqB,OAAO,CAAC,CAAC;;IAExC;IACArB,IAAI,CAACsB,QAAQ,CAACzB,IAAI,EAAE;MAClB0B,CAAC,EAAE,EAAE;MACLC,CAAC,EAAEJ,MAAM,GAAG,EAAE;MACdK,IAAI,EAAE,EAAE;MACRC,QAAQ,EAAEP,KAAK,GAAG;IACpB,CAAC,CAAC;;IAEF;IACA,MAAMQ,QAAQ,GAAG,MAAMX,MAAM,CAACY,IAAI,CAAC,CAAC;IACpC,OAAO,IAAIC,IAAI,CAAC,CAACF,QAAQ,CAAC,EAAE;MAAEG,IAAI,EAAE;IAAkB,CAAC,CAAC;EAC1D,CAAC,CAAC,OAAOlB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,MAAM,IAAID,KAAK,CAAC,kCAAkC,GAAGC,KAAK,CAACE,OAAO,CAAC;EACrE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}