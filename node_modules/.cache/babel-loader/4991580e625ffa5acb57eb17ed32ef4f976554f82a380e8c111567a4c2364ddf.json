{"ast":null,"code":"import { PDFDocument } from 'pdf-lib';\nimport * as pdfjsLib from 'pdfjs-dist';\n\n// Initialize PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\nexport const processResume = async file => {\n  try {\n    const arrayBuffer = await file.arrayBuffer();\n    const pdf = await pdfjsLib.getDocument(arrayBuffer).promise;\n    let fullText = '';\n\n    // Process each page\n    for (let i = 1; i <= pdf.numPages; i++) {\n      const page = await pdf.getPage(i);\n      const textContent = await page.getTextContent();\n\n      // Sort text items by vertical position (y) and then horizontal position (x)\n      const sortedItems = textContent.items.sort((a, b) => {\n        // If y positions are significantly different (more than 5 units), sort by y\n        if (Math.abs(a.transform[5] - b.transform[5]) > 5) {\n          return b.transform[5] - a.transform[5];\n        }\n        // Otherwise sort by x position\n        return a.transform[4] - b.transform[4];\n      });\n      let currentLine = '';\n      let currentY = null;\n      let pageText = '';\n\n      // Process text items to preserve formatting\n      for (const item of sortedItems) {\n        const y = item.transform[5];\n\n        // If this is a new line (y position changed significantly)\n        if (currentY === null || Math.abs(y - currentY) > 5) {\n          if (currentLine) {\n            pageText += currentLine.trim() + '\\n';\n          }\n          currentLine = item.str;\n        } else {\n          // Same line, add space if needed\n          currentLine += (currentLine ? ' ' : '') + item.str;\n        }\n        currentY = y;\n      }\n\n      // Add the last line\n      if (currentLine) {\n        pageText += currentLine.trim();\n      }\n\n      // Clean up the page text\n      pageText = pageText.replace(/\\s+/g, ' ') // Replace multiple spaces with single space\n      .replace(/\\n\\s+/g, '\\n') // Remove leading spaces from lines\n      .trim();\n\n      // Add page break if not the last page\n      fullText += pageText + (i < pdf.numPages ? '\\n\\n' : '');\n    }\n\n    // Clean up the text while preserving important formatting\n    return fullText.replace(/\\n{3,}/g, '\\n\\n') // Replace multiple newlines with double newlines\n    .replace(/\\s+/g, ' ') // Replace multiple spaces with single space\n    .trim();\n  } catch (error) {\n    console.error('Error processing PDF:', error);\n    throw new Error('Failed to process PDF file. Please make sure it is a valid PDF.');\n  }\n};\nexport const createOptimizedPDF = async text => {\n  try {\n    const pdfDoc = await PDFDocument.create();\n    const page = pdfDoc.addPage();\n    const {\n      width,\n      height\n    } = page.getSize();\n\n    // Add text to the PDF\n    page.drawText(text, {\n      x: 50,\n      y: height - 50,\n      size: 12,\n      maxWidth: width - 100\n    });\n\n    // Generate PDF bytes\n    const pdfBytes = await pdfDoc.save();\n    return new Blob([pdfBytes], {\n      type: 'application/pdf'\n    });\n  } catch (error) {\n    console.error('Error creating PDF:', error);\n    throw new Error('Failed to create optimized PDF: ' + error.message);\n  }\n};","map":{"version":3,"names":["PDFDocument","pdfjsLib","GlobalWorkerOptions","workerSrc","version","processResume","file","arrayBuffer","pdf","getDocument","promise","fullText","i","numPages","page","getPage","textContent","getTextContent","sortedItems","items","sort","a","b","Math","abs","transform","currentLine","currentY","pageText","item","y","trim","str","replace","error","console","Error","createOptimizedPDF","text","pdfDoc","create","addPage","width","height","getSize","drawText","x","size","maxWidth","pdfBytes","save","Blob","type","message"],"sources":["/var/home/dadmin/hackapp/src/utils/resumeProcessing.js"],"sourcesContent":["import { PDFDocument } from 'pdf-lib';\nimport * as pdfjsLib from 'pdfjs-dist';\n\n// Initialize PDF.js worker\npdfjsLib.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;\n\nexport const processResume = async (file) => {\n  try {\n    const arrayBuffer = await file.arrayBuffer();\n    const pdf = await pdfjsLib.getDocument(arrayBuffer).promise;\n    let fullText = '';\n    \n    // Process each page\n    for (let i = 1; i <= pdf.numPages; i++) {\n      const page = await pdf.getPage(i);\n      const textContent = await page.getTextContent();\n      \n      // Sort text items by vertical position (y) and then horizontal position (x)\n      const sortedItems = textContent.items.sort((a, b) => {\n        // If y positions are significantly different (more than 5 units), sort by y\n        if (Math.abs(a.transform[5] - b.transform[5]) > 5) {\n          return b.transform[5] - a.transform[5];\n        }\n        // Otherwise sort by x position\n        return a.transform[4] - b.transform[4];\n      });\n\n      let currentLine = '';\n      let currentY = null;\n      let pageText = '';\n\n      // Process text items to preserve formatting\n      for (const item of sortedItems) {\n        const y = item.transform[5];\n        \n        // If this is a new line (y position changed significantly)\n        if (currentY === null || Math.abs(y - currentY) > 5) {\n          if (currentLine) {\n            pageText += currentLine.trim() + '\\n';\n          }\n          currentLine = item.str;\n        } else {\n          // Same line, add space if needed\n          currentLine += (currentLine ? ' ' : '') + item.str;\n        }\n        currentY = y;\n      }\n\n      // Add the last line\n      if (currentLine) {\n        pageText += currentLine.trim();\n      }\n\n      // Clean up the page text\n      pageText = pageText\n        .replace(/\\s+/g, ' ') // Replace multiple spaces with single space\n        .replace(/\\n\\s+/g, '\\n') // Remove leading spaces from lines\n        .trim();\n\n      // Add page break if not the last page\n      fullText += pageText + (i < pdf.numPages ? '\\n\\n' : '');\n    }\n    \n    // Clean up the text while preserving important formatting\n    return fullText\n      .replace(/\\n{3,}/g, '\\n\\n') // Replace multiple newlines with double newlines\n      .replace(/\\s+/g, ' ') // Replace multiple spaces with single space\n      .trim();\n  } catch (error) {\n    console.error('Error processing PDF:', error);\n    throw new Error('Failed to process PDF file. Please make sure it is a valid PDF.');\n  }\n};\n\nexport const createOptimizedPDF = async (text) => {\n  try {\n    const pdfDoc = await PDFDocument.create();\n    const page = pdfDoc.addPage();\n    const { width, height } = page.getSize();\n    \n    // Add text to the PDF\n    page.drawText(text, {\n      x: 50,\n      y: height - 50,\n      size: 12,\n      maxWidth: width - 100,\n    });\n\n    // Generate PDF bytes\n    const pdfBytes = await pdfDoc.save();\n    return new Blob([pdfBytes], { type: 'application/pdf' });\n  } catch (error) {\n    console.error('Error creating PDF:', error);\n    throw new Error('Failed to create optimized PDF: ' + error.message);\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}