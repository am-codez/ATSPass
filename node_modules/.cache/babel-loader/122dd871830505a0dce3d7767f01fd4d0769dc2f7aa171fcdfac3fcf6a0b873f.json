{"ast":null,"code":"const stopwords = new Set(['a', 'an', 'and', 'are', 'as', 'at', 'be', 'by', 'for', 'from', 'has', 'he', 'in', 'is', 'it', 'its', 'of', 'on', 'or', 'that', 'the', 'this', 'to', 'was', 'were', 'will', 'with', 'the', 'their', 'they', 'them', 'these', 'those', 'am', 'been', 'being', 'have', 'had', 'having', 'do', 'does', 'did', 'doing', 'would', 'should', 'could', 'shall', 'should', 'may', 'might', 'must']);\nconst synonymDictionary = {\n  'develop': ['create', 'build', 'design', 'implement', 'engineer', 'construct'],\n  'create': ['develop', 'build', 'design', 'implement', 'engineer', 'construct'],\n  'build': ['develop', 'create', 'design', 'implement', 'engineer', 'construct'],\n  'design': ['develop', 'create', 'build', 'implement', 'engineer', 'construct'],\n  'implement': ['develop', 'create', 'build', 'design', 'engineer', 'construct'],\n  'manage': ['lead', 'direct', 'oversee', 'supervise', 'coordinate', 'administer'],\n  'lead': ['manage', 'direct', 'oversee', 'supervise', 'coordinate', 'administer'],\n  'direct': ['manage', 'lead', 'oversee', 'supervise', 'coordinate', 'administer'],\n  'oversee': ['manage', 'lead', 'direct', 'supervise', 'coordinate', 'administer'],\n  'supervise': ['manage', 'lead', 'direct', 'oversee', 'coordinate', 'administer'],\n  'analyze': ['examine', 'evaluate', 'assess', 'review', 'investigate', 'scrutinize'],\n  'examine': ['analyze', 'evaluate', 'assess', 'review', 'investigate', 'scrutinize'],\n  'evaluate': ['analyze', 'examine', 'assess', 'review', 'investigate', 'scrutinize'],\n  'assess': ['analyze', 'examine', 'evaluate', 'review', 'investigate', 'scrutinize'],\n  'review': ['analyze', 'examine', 'evaluate', 'assess', 'investigate', 'scrutinize'],\n  'improve': ['enhance', 'optimize', 'refine', 'upgrade', 'advance', 'strengthen'],\n  'enhance': ['improve', 'optimize', 'refine', 'upgrade', 'advance', 'strengthen'],\n  'optimize': ['improve', 'enhance', 'refine', 'upgrade', 'advance', 'strengthen'],\n  'refine': ['improve', 'enhance', 'optimize', 'upgrade', 'advance', 'strengthen'],\n  'upgrade': ['improve', 'enhance', 'optimize', 'refine', 'advance', 'strengthen'],\n  'advance': ['improve', 'enhance', 'optimize', 'refine', 'upgrade', 'strengthen'],\n  'strengthen': ['improve', 'enhance', 'optimize', 'refine', 'upgrade', 'advance']\n};\nexport const processText = text => {\n  // Convert to lowercase and split into words\n  const words = text.toLowerCase().replace(/[^\\w\\s]/g, '') // Remove punctuation\n  .split(/\\s+/); // Split on whitespace\n\n  // Filter out stopwords and short words\n  const keywords = words.filter(word => word.length > 2 && !stopwords.has(word));\n\n  // Remove duplicates\n  return [...new Set(keywords)];\n};\nexport const findSynonyms = word => {\n  return synonymDictionary[word.toLowerCase()] || [];\n};\nexport const optimizeText = (text, targetKeywords) => {\n  const sentences = text.split(/[.!?]+/).filter(s => s.trim());\n  const optimizedSentences = [];\n  let totalWordCount = 0;\n  const originalWordCount = text.split(/\\s+/).length;\n  const maxWordIncrease = 50; // Increased from 30 to 50\n\n  for (const sentence of sentences) {\n    const words = sentence.trim().split(/\\s+/);\n    const optimizedWords = [...words];\n    let modified = false;\n    let keywordCount = 0;\n\n    // First pass: count keywords in the sentence\n    for (const word of words) {\n      if (targetKeywords.includes(word.toLowerCase())) {\n        keywordCount++;\n      }\n    }\n\n    // Second pass: optimize the sentence\n    for (let i = 0; i < words.length; i++) {\n      const word = words[i].toLowerCase();\n\n      // Check if the word is in target keywords\n      if (targetKeywords.includes(word)) {\n        const synonyms = findSynonyms(word);\n        if (synonyms.length > 0) {\n          // Choose a synonym that better matches the job description\n          const bestSynonym = synonyms[0];\n          optimizedWords[i] = bestSynonym;\n          modified = true;\n        }\n      } else {\n        // Check if any target keyword has this word as a synonym\n        for (const targetKeyword of targetKeywords) {\n          const targetSynonyms = findSynonyms(targetKeyword);\n          if (targetSynonyms.includes(word)) {\n            optimizedWords[i] = targetKeyword;\n            modified = true;\n            break;\n          }\n        }\n      }\n    }\n\n    // Add relevant keywords if the sentence has few or none\n    if (keywordCount < 2 && modified) {\n      const relevantKeywords = targetKeywords.filter(keyword => !optimizedWords.some(word => word.toLowerCase() === keyword || findSynonyms(keyword).includes(word.toLowerCase())));\n      if (relevantKeywords.length > 0) {\n        const keywordToAdd = relevantKeywords[0];\n        optimizedWords.push(keywordToAdd);\n        totalWordCount++;\n      }\n    }\n\n    // Only include modified sentences if we haven't exceeded the word limit\n    const newWordCount = optimizedWords.join(' ').split(/\\s+/).length;\n    if (modified && totalWordCount + newWordCount - words.length <= originalWordCount + maxWordIncrease) {\n      optimizedSentences.push(optimizedWords.join(' '));\n      totalWordCount += newWordCount - words.length;\n    } else {\n      optimizedSentences.push(sentence.trim());\n    }\n  }\n  return optimizedSentences.join('. ');\n};","map":{"version":3,"names":["stopwords","Set","synonymDictionary","processText","text","words","toLowerCase","replace","split","keywords","filter","word","length","has","findSynonyms","optimizeText","targetKeywords","sentences","s","trim","optimizedSentences","totalWordCount","originalWordCount","maxWordIncrease","sentence","optimizedWords","modified","keywordCount","includes","i","synonyms","bestSynonym","targetKeyword","targetSynonyms","relevantKeywords","keyword","some","keywordToAdd","push","newWordCount","join"],"sources":["/var/home/dadmin/hackapp/src/utils/textProcessing.js"],"sourcesContent":["const stopwords = new Set([\n  'a', 'an', 'and', 'are', 'as', 'at', 'be', 'by', 'for', 'from', 'has', 'he',\n  'in', 'is', 'it', 'its', 'of', 'on', 'or', 'that', 'the', 'this', 'to', 'was',\n  'were', 'will', 'with', 'the', 'their', 'they', 'them', 'these', 'those',\n  'am', 'been', 'being', 'have', 'had', 'having', 'do', 'does', 'did', 'doing',\n  'would', 'should', 'could', 'shall', 'should', 'may', 'might', 'must'\n]);\n\nconst synonymDictionary = {\n  'develop': ['create', 'build', 'design', 'implement', 'engineer', 'construct'],\n  'create': ['develop', 'build', 'design', 'implement', 'engineer', 'construct'],\n  'build': ['develop', 'create', 'design', 'implement', 'engineer', 'construct'],\n  'design': ['develop', 'create', 'build', 'implement', 'engineer', 'construct'],\n  'implement': ['develop', 'create', 'build', 'design', 'engineer', 'construct'],\n  'manage': ['lead', 'direct', 'oversee', 'supervise', 'coordinate', 'administer'],\n  'lead': ['manage', 'direct', 'oversee', 'supervise', 'coordinate', 'administer'],\n  'direct': ['manage', 'lead', 'oversee', 'supervise', 'coordinate', 'administer'],\n  'oversee': ['manage', 'lead', 'direct', 'supervise', 'coordinate', 'administer'],\n  'supervise': ['manage', 'lead', 'direct', 'oversee', 'coordinate', 'administer'],\n  'analyze': ['examine', 'evaluate', 'assess', 'review', 'investigate', 'scrutinize'],\n  'examine': ['analyze', 'evaluate', 'assess', 'review', 'investigate', 'scrutinize'],\n  'evaluate': ['analyze', 'examine', 'assess', 'review', 'investigate', 'scrutinize'],\n  'assess': ['analyze', 'examine', 'evaluate', 'review', 'investigate', 'scrutinize'],\n  'review': ['analyze', 'examine', 'evaluate', 'assess', 'investigate', 'scrutinize'],\n  'improve': ['enhance', 'optimize', 'refine', 'upgrade', 'advance', 'strengthen'],\n  'enhance': ['improve', 'optimize', 'refine', 'upgrade', 'advance', 'strengthen'],\n  'optimize': ['improve', 'enhance', 'refine', 'upgrade', 'advance', 'strengthen'],\n  'refine': ['improve', 'enhance', 'optimize', 'upgrade', 'advance', 'strengthen'],\n  'upgrade': ['improve', 'enhance', 'optimize', 'refine', 'advance', 'strengthen'],\n  'advance': ['improve', 'enhance', 'optimize', 'refine', 'upgrade', 'strengthen'],\n  'strengthen': ['improve', 'enhance', 'optimize', 'refine', 'upgrade', 'advance']\n};\n\nexport const processText = (text) => {\n  // Convert to lowercase and split into words\n  const words = text.toLowerCase()\n    .replace(/[^\\w\\s]/g, '') // Remove punctuation\n    .split(/\\s+/); // Split on whitespace\n\n  // Filter out stopwords and short words\n  const keywords = words.filter(word => \n    word.length > 2 && \n    !stopwords.has(word)\n  );\n\n  // Remove duplicates\n  return [...new Set(keywords)];\n};\n\nexport const findSynonyms = (word) => {\n  return synonymDictionary[word.toLowerCase()] || [];\n};\n\nexport const optimizeText = (text, targetKeywords) => {\n  const sentences = text.split(/[.!?]+/).filter(s => s.trim());\n  const optimizedSentences = [];\n  let totalWordCount = 0;\n  const originalWordCount = text.split(/\\s+/).length;\n  const maxWordIncrease = 50; // Increased from 30 to 50\n\n  for (const sentence of sentences) {\n    const words = sentence.trim().split(/\\s+/);\n    const optimizedWords = [...words];\n    let modified = false;\n    let keywordCount = 0;\n\n    // First pass: count keywords in the sentence\n    for (const word of words) {\n      if (targetKeywords.includes(word.toLowerCase())) {\n        keywordCount++;\n      }\n    }\n\n    // Second pass: optimize the sentence\n    for (let i = 0; i < words.length; i++) {\n      const word = words[i].toLowerCase();\n      \n      // Check if the word is in target keywords\n      if (targetKeywords.includes(word)) {\n        const synonyms = findSynonyms(word);\n        if (synonyms.length > 0) {\n          // Choose a synonym that better matches the job description\n          const bestSynonym = synonyms[0];\n          optimizedWords[i] = bestSynonym;\n          modified = true;\n        }\n      } else {\n        // Check if any target keyword has this word as a synonym\n        for (const targetKeyword of targetKeywords) {\n          const targetSynonyms = findSynonyms(targetKeyword);\n          if (targetSynonyms.includes(word)) {\n            optimizedWords[i] = targetKeyword;\n            modified = true;\n            break;\n          }\n        }\n      }\n    }\n\n    // Add relevant keywords if the sentence has few or none\n    if (keywordCount < 2 && modified) {\n      const relevantKeywords = targetKeywords.filter(keyword => \n        !optimizedWords.some(word => \n          word.toLowerCase() === keyword || \n          findSynonyms(keyword).includes(word.toLowerCase())\n        )\n      );\n\n      if (relevantKeywords.length > 0) {\n        const keywordToAdd = relevantKeywords[0];\n        optimizedWords.push(keywordToAdd);\n        totalWordCount++;\n      }\n    }\n\n    // Only include modified sentences if we haven't exceeded the word limit\n    const newWordCount = optimizedWords.join(' ').split(/\\s+/).length;\n    if (modified && (totalWordCount + newWordCount - words.length) <= originalWordCount + maxWordIncrease) {\n      optimizedSentences.push(optimizedWords.join(' '));\n      totalWordCount += newWordCount - words.length;\n    } else {\n      optimizedSentences.push(sentence.trim());\n    }\n  }\n\n  return optimizedSentences.join('. ');\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}