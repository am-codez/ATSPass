{"ast":null,"code":"import * as pdfjsLib from 'pdf-lib';\nimport { PDFDocument } from 'pdf-lib';\nexport const processResume = async file => {\n  try {\n    const arrayBuffer = await file.arrayBuffer();\n    const pdfDoc = await PDFDocument.load(arrayBuffer);\n    let text = '';\n\n    // Extract text from each page\n    for (let i = 0; i < pdfDoc.getPageCount(); i++) {\n      const page = pdfDoc.getPage(i);\n      const {\n        width,\n        height\n      } = page.getSize();\n\n      // Get text content from the page\n      const textContent = await page.getTextContent();\n      text += textContent + '\\n';\n    }\n    return text;\n  } catch (error) {\n    console.error('Error processing PDF:', error);\n    throw new Error('Failed to process PDF file');\n  }\n};\nexport const createOptimizedPDF = async text => {\n  try {\n    const pdfDoc = await PDFDocument.create();\n    const page = pdfDoc.addPage();\n    const {\n      width,\n      height\n    } = page.getSize();\n\n    // Add text to the PDF\n    page.drawText(text, {\n      x: 50,\n      y: height - 50,\n      size: 12,\n      maxWidth: width - 100\n    });\n\n    // Generate PDF bytes\n    const pdfBytes = await pdfDoc.save();\n    return new Blob([pdfBytes], {\n      type: 'application/pdf'\n    });\n  } catch (error) {\n    console.error('Error creating PDF:', error);\n    throw new Error('Failed to create optimized PDF');\n  }\n};","map":{"version":3,"names":["pdfjsLib","PDFDocument","processResume","file","arrayBuffer","pdfDoc","load","text","i","getPageCount","page","getPage","width","height","getSize","textContent","getTextContent","error","console","Error","createOptimizedPDF","create","addPage","drawText","x","y","size","maxWidth","pdfBytes","save","Blob","type"],"sources":["/var/home/dadmin/hackapp/src/utils/resumeProcessing.js"],"sourcesContent":["import * as pdfjsLib from 'pdf-lib';\nimport { PDFDocument } from 'pdf-lib';\n\nexport const processResume = async (file) => {\n  try {\n    const arrayBuffer = await file.arrayBuffer();\n    const pdfDoc = await PDFDocument.load(arrayBuffer);\n    let text = '';\n\n    // Extract text from each page\n    for (let i = 0; i < pdfDoc.getPageCount(); i++) {\n      const page = pdfDoc.getPage(i);\n      const { width, height } = page.getSize();\n      \n      // Get text content from the page\n      const textContent = await page.getTextContent();\n      text += textContent + '\\n';\n    }\n\n    return text;\n  } catch (error) {\n    console.error('Error processing PDF:', error);\n    throw new Error('Failed to process PDF file');\n  }\n};\n\nexport const createOptimizedPDF = async (text) => {\n  try {\n    const pdfDoc = await PDFDocument.create();\n    const page = pdfDoc.addPage();\n    const { width, height } = page.getSize();\n    \n    // Add text to the PDF\n    page.drawText(text, {\n      x: 50,\n      y: height - 50,\n      size: 12,\n      maxWidth: width - 100,\n    });\n\n    // Generate PDF bytes\n    const pdfBytes = await pdfDoc.save();\n    return new Blob([pdfBytes], { type: 'application/pdf' });\n  } catch (error) {\n    console.error('Error creating PDF:', error);\n    throw new Error('Failed to create optimized PDF');\n  }\n}; "],"mappings":"AAAA,OAAO,KAAKA,QAAQ,MAAM,SAAS;AACnC,SAASC,WAAW,QAAQ,SAAS;AAErC,OAAO,MAAMC,aAAa,GAAG,MAAOC,IAAI,IAAK;EAC3C,IAAI;IACF,MAAMC,WAAW,GAAG,MAAMD,IAAI,CAACC,WAAW,CAAC,CAAC;IAC5C,MAAMC,MAAM,GAAG,MAAMJ,WAAW,CAACK,IAAI,CAACF,WAAW,CAAC;IAClD,IAAIG,IAAI,GAAG,EAAE;;IAEb;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,MAAM,CAACI,YAAY,CAAC,CAAC,EAAED,CAAC,EAAE,EAAE;MAC9C,MAAME,IAAI,GAAGL,MAAM,CAACM,OAAO,CAACH,CAAC,CAAC;MAC9B,MAAM;QAAEI,KAAK;QAAEC;MAAO,CAAC,GAAGH,IAAI,CAACI,OAAO,CAAC,CAAC;;MAExC;MACA,MAAMC,WAAW,GAAG,MAAML,IAAI,CAACM,cAAc,CAAC,CAAC;MAC/CT,IAAI,IAAIQ,WAAW,GAAG,IAAI;IAC5B;IAEA,OAAOR,IAAI;EACb,CAAC,CAAC,OAAOU,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAM,IAAIE,KAAK,CAAC,4BAA4B,CAAC;EAC/C;AACF,CAAC;AAED,OAAO,MAAMC,kBAAkB,GAAG,MAAOb,IAAI,IAAK;EAChD,IAAI;IACF,MAAMF,MAAM,GAAG,MAAMJ,WAAW,CAACoB,MAAM,CAAC,CAAC;IACzC,MAAMX,IAAI,GAAGL,MAAM,CAACiB,OAAO,CAAC,CAAC;IAC7B,MAAM;MAAEV,KAAK;MAAEC;IAAO,CAAC,GAAGH,IAAI,CAACI,OAAO,CAAC,CAAC;;IAExC;IACAJ,IAAI,CAACa,QAAQ,CAAChB,IAAI,EAAE;MAClBiB,CAAC,EAAE,EAAE;MACLC,CAAC,EAAEZ,MAAM,GAAG,EAAE;MACda,IAAI,EAAE,EAAE;MACRC,QAAQ,EAAEf,KAAK,GAAG;IACpB,CAAC,CAAC;;IAEF;IACA,MAAMgB,QAAQ,GAAG,MAAMvB,MAAM,CAACwB,IAAI,CAAC,CAAC;IACpC,OAAO,IAAIC,IAAI,CAAC,CAACF,QAAQ,CAAC,EAAE;MAAEG,IAAI,EAAE;IAAkB,CAAC,CAAC;EAC1D,CAAC,CAAC,OAAOd,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,MAAM,IAAIE,KAAK,CAAC,gCAAgC,CAAC;EACnD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}